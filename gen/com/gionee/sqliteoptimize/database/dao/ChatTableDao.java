package com.gionee.sqliteoptimize.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gionee.sqliteoptimize.database.entity.ChatTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT_TABLE.
*/
public class ChatTableDao extends AbstractDao<ChatTable, Long> {

    public static final String TABLENAME = "CHAT_TABLE";

    /**
     * Properties of entity ChatTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgId = new Property(1, long.class, "msgId", false, "MSG_ID");
        public final static Property ChatType = new Property(2, int.class, "chatType", false, "CHAT_TYPE");
        public final static Property FriendId = new Property(3, long.class, "friendId", false, "FRIEND_ID");
        public final static Property GroupId = new Property(4, long.class, "groupId", false, "GROUP_ID");
        public final static Property Direction = new Property(5, int.class, "direction", false, "DIRECTION");
        public final static Property Content_type = new Property(6, String.class, "content_type", false, "CONTENT_TYPE");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(8, long.class, "time", false, "TIME");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
        public final static Property Unreaded = new Property(10, Boolean.class, "unreaded", false, "UNREADED");
    };


    public ChatTableDao(DaoConfig config) {
        super(config);
    }
    
    public ChatTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_TABLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MSG_ID' INTEGER NOT NULL ," + // 1: msgId
                "'CHAT_TYPE' INTEGER NOT NULL ," + // 2: chatType
                "'FRIEND_ID' INTEGER NOT NULL ," + // 3: friendId
                "'GROUP_ID' INTEGER NOT NULL ," + // 4: groupId
                "'DIRECTION' INTEGER NOT NULL ," + // 5: direction
                "'CONTENT_TYPE' TEXT NOT NULL ," + // 6: content_type
                "'CONTENT' TEXT NOT NULL ," + // 7: content
                "'TIME' INTEGER NOT NULL ," + // 8: time
                "'STATUS' INTEGER NOT NULL ," + // 9: status
                "'UNREADED' INTEGER);"); // 10: unreaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsgId());
        stmt.bindLong(3, entity.getChatType());
        stmt.bindLong(4, entity.getFriendId());
        stmt.bindLong(5, entity.getGroupId());
        stmt.bindLong(6, entity.getDirection());
        stmt.bindString(7, entity.getContent_type());
        stmt.bindString(8, entity.getContent());
        stmt.bindLong(9, entity.getTime());
        stmt.bindLong(10, entity.getStatus());
 
        Boolean unreaded = entity.getUnreaded();
        if (unreaded != null) {
            stmt.bindLong(11, unreaded ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatTable readEntity(Cursor cursor, int offset) {
        ChatTable entity = new ChatTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // msgId
            cursor.getInt(offset + 2), // chatType
            cursor.getLong(offset + 3), // friendId
            cursor.getLong(offset + 4), // groupId
            cursor.getInt(offset + 5), // direction
            cursor.getString(offset + 6), // content_type
            cursor.getString(offset + 7), // content
            cursor.getLong(offset + 8), // time
            cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // unreaded
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgId(cursor.getLong(offset + 1));
        entity.setChatType(cursor.getInt(offset + 2));
        entity.setFriendId(cursor.getLong(offset + 3));
        entity.setGroupId(cursor.getLong(offset + 4));
        entity.setDirection(cursor.getInt(offset + 5));
        entity.setContent_type(cursor.getString(offset + 6));
        entity.setContent(cursor.getString(offset + 7));
        entity.setTime(cursor.getLong(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setUnreaded(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
