package com.gionee.sqliteoptimize.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gionee.sqliteoptimize.database.entity.GroupMembers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GROUP_MEMBERS.
*/
public class GroupMembersDao extends AbstractDao<GroupMembers, Long> {

    public static final String TABLENAME = "GROUP_MEMBERS";

    /**
     * Properties of entity GroupMembers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Gid = new Property(0, long.class, "gid", true, "GID");
        public final static Property Seq = new Property(1, int.class, "seq", false, "SEQ");
        public final static Property UserList = new Property(2, String.class, "userList", false, "USER_LIST");
        public final static Property Total = new Property(3, int.class, "total", false, "TOTAL");
        public final static Property Index = new Property(4, Integer.class, "index", false, "INDEX");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
    };


    public GroupMembersDao(DaoConfig config) {
        super(config);
    }
    
    public GroupMembersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUP_MEMBERS' (" + //
                "'GID' INTEGER PRIMARY KEY NOT NULL ," + // 0: gid
                "'SEQ' INTEGER NOT NULL ," + // 1: seq
                "'USER_LIST' TEXT," + // 2: userList
                "'TOTAL' INTEGER NOT NULL ," + // 3: total
                "'INDEX' INTEGER," + // 4: index
                "'TYPE' INTEGER NOT NULL );"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_MEMBERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupMembers entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGid());
        stmt.bindLong(2, entity.getSeq());
 
        String userList = entity.getUserList();
        if (userList != null) {
            stmt.bindString(3, userList);
        }
        stmt.bindLong(4, entity.getTotal());
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(5, index);
        }
        stmt.bindLong(6, entity.getType());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GroupMembers readEntity(Cursor cursor, int offset) {
        GroupMembers entity = new GroupMembers( //
            cursor.getLong(offset + 0), // gid
            cursor.getInt(offset + 1), // seq
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userList
            cursor.getInt(offset + 3), // total
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // index
            cursor.getInt(offset + 5) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupMembers entity, int offset) {
        entity.setGid(cursor.getLong(offset + 0));
        entity.setSeq(cursor.getInt(offset + 1));
        entity.setUserList(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTotal(cursor.getInt(offset + 3));
        entity.setIndex(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GroupMembers entity, long rowId) {
        entity.setGid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GroupMembers entity) {
        if(entity != null) {
            return entity.getGid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
