package com.gionee.sqliteoptimize.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gionee.sqliteoptimize.database.entity.MemberInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEMBER_INFO.
*/
public class MemberInfoDao extends AbstractDao<MemberInfo, Long> {

    public static final String TABLENAME = "MEMBER_INFO";

    /**
     * Properties of entity MemberInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, long.class, "uid", true, "UID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Alias = new Property(2, String.class, "alias", false, "ALIAS");
        public final static Property UserAvatar = new Property(3, String.class, "userAvatar", false, "USER_AVATAR");
        public final static Property Area = new Property(4, String.class, "area", false, "AREA");
        public final static Property PhoneNum = new Property(5, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Sex = new Property(6, Integer.class, "sex", false, "SEX");
        public final static Property Sign = new Property(7, String.class, "sign", false, "SIGN");
        public final static Property Hobby = new Property(8, String.class, "hobby", false, "HOBBY");
        public final static Property Vip = new Property(9, Integer.class, "vip", false, "VIP");
        public final static Property SortLetters = new Property(10, String.class, "sortLetters", false, "SORT_LETTERS");
        public final static Property Status = new Property(11, int.class, "status", false, "STATUS");
    };


    public MemberInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MemberInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEMBER_INFO' (" + //
                "'UID' INTEGER PRIMARY KEY NOT NULL ," + // 0: uid
                "'USER_NAME' TEXT," + // 1: userName
                "'ALIAS' TEXT," + // 2: alias
                "'USER_AVATAR' TEXT," + // 3: userAvatar
                "'AREA' TEXT," + // 4: area
                "'PHONE_NUM' TEXT," + // 5: phoneNum
                "'SEX' INTEGER," + // 6: sex
                "'SIGN' TEXT," + // 7: sign
                "'HOBBY' TEXT," + // 8: hobby
                "'VIP' INTEGER," + // 9: vip
                "'SORT_LETTERS' TEXT," + // 10: sortLetters
                "'STATUS' INTEGER NOT NULL );"); // 11: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEMBER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MemberInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
 
        String userAvatar = entity.getUserAvatar();
        if (userAvatar != null) {
            stmt.bindString(4, userAvatar);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(5, area);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(6, phoneNum);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(7, sex);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(8, sign);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(9, hobby);
        }
 
        Integer vip = entity.getVip();
        if (vip != null) {
            stmt.bindLong(10, vip);
        }
 
        String sortLetters = entity.getSortLetters();
        if (sortLetters != null) {
            stmt.bindString(11, sortLetters);
        }
        stmt.bindLong(12, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MemberInfo readEntity(Cursor cursor, int offset) {
        MemberInfo entity = new MemberInfo( //
            cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alias
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userAvatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // area
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phoneNum
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sign
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hobby
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // vip
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sortLetters
            cursor.getInt(offset + 11) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MemberInfo entity, int offset) {
        entity.setUid(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlias(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArea(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoneNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSign(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHobby(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVip(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSortLetters(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MemberInfo entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MemberInfo entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
